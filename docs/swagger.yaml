definitions:
  dtos.ActorDTO:
    properties:
      birth_date:
        type: string
      name:
        type: string
      sex:
        type: string
    type: object
  dtos.MovieDTO:
    properties:
      desctiption:
        type: string
      name:
        type: string
      rating:
        type: integer
    type: object
  models.Actor:
    properties:
      birth_date:
        type: string
      movies:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
      name:
        type: string
      sex:
        type: string
    type: object
  models.Movie:
    properties:
      actors:
        items:
          $ref: '#/definitions/models.Actor'
        type: array
      desctiption:
        type: string
      name:
        type: string
      rating:
        type: integer
    type: object
  models.UserAuth:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  usersauth.jsonTokenErrorWrapper:
    properties:
      error:
        type: string
    type: object
  usersauth.jsonTokenWrapper:
    properties:
      token:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: Filmoteka API
  version: "1.0"
paths:
  /actor:
    post:
      consumes:
      - application/json
      operationId: create-actor
      parameters:
      - description: List Info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.ActorDTO'
      responses:
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: CreateActor
      tags:
      - actors
  /actors/{id}:
    delete:
      operationId: delete-actor
      parameters:
      - description: Actor ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: DeleteActorById
      tags:
      - actors
    patch:
      consumes:
      - application/json
      operationId: partially-update-actor
      parameters:
      - description: Actor Info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.ActorDTO'
      - description: Actor ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "400":
          description: Bad Request
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: PartiallyUpdateActorById
      tags:
      - actors
    put:
      consumes:
      - application/json
      operationId: update-actor
      parameters:
      - description: Actor Info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.ActorDTO'
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: UpdateActorById
      tags:
      - actors
  /actors/movies:
    get:
      operationId: get-actor-movie
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Actor'
            type: array
      summary: GetAllActorsWithMovies
      tags:
      - actors
  /auth/sign-in:
    get:
      operationId: sing-in-user
      parameters:
      - description: Username
        in: query
        name: username
        required: true
        type: string
      - description: Password
        in: query
        name: password
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usersauth.jsonTokenWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/usersauth.jsonTokenErrorWrapper'
      summary: SignInUser
      tags:
      - auth
  /auth/sign-up:
    post:
      operationId: sing-up-user
      parameters:
      - description: User Auth
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UserAuth'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: SignUpUser
      tags:
      - auth
  /movie:
    post:
      consumes:
      - application/json
      operationId: create-movie
      parameters:
      - description: Movie Info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.MovieDTO'
      responses:
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: CreateMovie
      tags:
      - movies
  /movies:
    get:
      operationId: get-sorted-movies
      parameters:
      - description: sort by query parram
        in: query
        name: q
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.MovieDTO'
      summary: GetMoviesByName
      tags:
      - movies
  /movies/{id}:
    delete:
      operationId: delete-movie
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: DeleteMovieById
      tags:
      - movies
    patch:
      consumes:
      - application/json
      operationId: partially-update-movie
      parameters:
      - description: Actor Info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.MovieDTO'
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "400":
          description: Bad Request
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: PartiallyUpdateMovieById
      tags:
      - movies
    put:
      consumes:
      - application/json
      operationId: update-movie
      parameters:
      - description: Movie Info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.MovieDTO'
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: UpdateMovieById
      tags:
      - movies
  /movies/actors/{actor_name}:
    get:
      operationId: get-movies-by-actor-name
      parameters:
      - description: Actor Name
        in: path
        name: actor_name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.MovieDTO'
            type: array
        "404":
          description: Not Found
      summary: GetMoviesByActorName
      tags:
      - movies
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
